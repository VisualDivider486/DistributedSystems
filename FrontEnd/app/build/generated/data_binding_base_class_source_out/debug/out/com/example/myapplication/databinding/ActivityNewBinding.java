// Generated by view binder compiler. Do not edit!
package com.example.myapplication.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.example.myapplication.R;
import com.google.android.material.appbar.MaterialToolbar;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ActivityNewBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final Button buttonViewStats;

  @NonNull
  public final TextView currentTitle;

  @NonNull
  public final TextView message;

  @NonNull
  public final TextView textViewAverageSpeed;

  @NonNull
  public final TextView textViewDistance;

  @NonNull
  public final TextView textViewElevation;

  @NonNull
  public final TextView textViewTime;

  @NonNull
  public final TextView textViewTotalDistance;

  @NonNull
  public final TextView textViewTotalElevation;

  @NonNull
  public final TextView textViewTotalTime;

  @NonNull
  public final MaterialToolbar toolbar;

  @NonNull
  public final TextView totalTitle;

  private ActivityNewBinding(@NonNull ConstraintLayout rootView, @NonNull Button buttonViewStats,
      @NonNull TextView currentTitle, @NonNull TextView message,
      @NonNull TextView textViewAverageSpeed, @NonNull TextView textViewDistance,
      @NonNull TextView textViewElevation, @NonNull TextView textViewTime,
      @NonNull TextView textViewTotalDistance, @NonNull TextView textViewTotalElevation,
      @NonNull TextView textViewTotalTime, @NonNull MaterialToolbar toolbar,
      @NonNull TextView totalTitle) {
    this.rootView = rootView;
    this.buttonViewStats = buttonViewStats;
    this.currentTitle = currentTitle;
    this.message = message;
    this.textViewAverageSpeed = textViewAverageSpeed;
    this.textViewDistance = textViewDistance;
    this.textViewElevation = textViewElevation;
    this.textViewTime = textViewTime;
    this.textViewTotalDistance = textViewTotalDistance;
    this.textViewTotalElevation = textViewTotalElevation;
    this.textViewTotalTime = textViewTotalTime;
    this.toolbar = toolbar;
    this.totalTitle = totalTitle;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ActivityNewBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ActivityNewBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.activity_new, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ActivityNewBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.buttonViewStats;
      Button buttonViewStats = ViewBindings.findChildViewById(rootView, id);
      if (buttonViewStats == null) {
        break missingId;
      }

      id = R.id.currentTitle;
      TextView currentTitle = ViewBindings.findChildViewById(rootView, id);
      if (currentTitle == null) {
        break missingId;
      }

      id = R.id.message;
      TextView message = ViewBindings.findChildViewById(rootView, id);
      if (message == null) {
        break missingId;
      }

      id = R.id.textViewAverageSpeed;
      TextView textViewAverageSpeed = ViewBindings.findChildViewById(rootView, id);
      if (textViewAverageSpeed == null) {
        break missingId;
      }

      id = R.id.textViewDistance;
      TextView textViewDistance = ViewBindings.findChildViewById(rootView, id);
      if (textViewDistance == null) {
        break missingId;
      }

      id = R.id.textViewElevation;
      TextView textViewElevation = ViewBindings.findChildViewById(rootView, id);
      if (textViewElevation == null) {
        break missingId;
      }

      id = R.id.textViewTime;
      TextView textViewTime = ViewBindings.findChildViewById(rootView, id);
      if (textViewTime == null) {
        break missingId;
      }

      id = R.id.textViewTotalDistance;
      TextView textViewTotalDistance = ViewBindings.findChildViewById(rootView, id);
      if (textViewTotalDistance == null) {
        break missingId;
      }

      id = R.id.textViewTotalElevation;
      TextView textViewTotalElevation = ViewBindings.findChildViewById(rootView, id);
      if (textViewTotalElevation == null) {
        break missingId;
      }

      id = R.id.textViewTotalTime;
      TextView textViewTotalTime = ViewBindings.findChildViewById(rootView, id);
      if (textViewTotalTime == null) {
        break missingId;
      }

      id = R.id.toolbar;
      MaterialToolbar toolbar = ViewBindings.findChildViewById(rootView, id);
      if (toolbar == null) {
        break missingId;
      }

      id = R.id.totalTitle;
      TextView totalTitle = ViewBindings.findChildViewById(rootView, id);
      if (totalTitle == null) {
        break missingId;
      }

      return new ActivityNewBinding((ConstraintLayout) rootView, buttonViewStats, currentTitle,
          message, textViewAverageSpeed, textViewDistance, textViewElevation, textViewTime,
          textViewTotalDistance, textViewTotalElevation, textViewTotalTime, toolbar, totalTitle);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
